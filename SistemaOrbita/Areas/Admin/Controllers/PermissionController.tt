// This is an auto-generated file.
<#@ template language="C#" hostSpecific="true" debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDte" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System" #>

using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using SistemaOrbita.Helpers;
using SistemaOrbita.Utilities;
using SistemaOrbita.Model.ViewModels;
using SistemaOrbita.Web.Areas.Identity.Data;

<#
// Define the list of permissions
var permissions = new List<string>
{
	"View",
	"Edit",
	"Create",
	"Delete"
};

var modelClasses = ListFiles("/../../../../SistemaOrbita.Model/Models", "cs"); 

#>

namespace SistemaOrbita.Areas.Admin.Controllers
{
	[Area("Admin")]
	//[Authorize(Roles = "Admin")]
	public class PermissionController : Controller
	{
		private readonly RoleManager<IdentityRole> _roleManager;
		public PermissionController(RoleManager<IdentityRole> roleManager)
		{
			_roleManager = roleManager;
		}
		public async Task<ActionResult> Index(string id)
		{
			var model = new PermissionVM();
			var allPermissions = new List<RoleClaimsVM>();
			<# foreach (var modelClass in modelClasses) { #>
allPermissions.GetPermissions(typeof(Permissions.<#= modelClass #>), id); 
			<# } #>                                  
			var role = await _roleManager.FindByIdAsync(id);
			model.RoleId = id;
			var claims = await _roleManager.GetClaimsAsync(role);
			var allClaimValues = allPermissions.Select(a => a.Value).ToList();
			var roleClaimValues = claims.Select(a => a.Value).ToList();
			var authorizedClaims = allClaimValues.Intersect(roleClaimValues).ToList();
			foreach (var permission in allPermissions)
			{
				if (authorizedClaims.Any(a => a == permission.Value))
				{
					permission.Selected = true;
				}
			}
			model.RoleClaimsCount = claims.Count;
			model.RoleClaims = allPermissions;
			model.RoleName = role.Name;
			return View(model);
		}
		public async Task<IActionResult> Update(PermissionVM model)
		{
			var role = await _roleManager.FindByIdAsync(model.RoleId);
			var claims = await _roleManager.GetClaimsAsync(role);
			foreach (var claim in claims)
			{
				await _roleManager.RemoveClaimAsync(role, claim);
			}
			var selectedClaims = model.RoleClaims.Where(a => a.Selected).ToList();
			foreach (var claim in selectedClaims)
			{
				await _roleManager.AddPermissionClaim(role, claim.Value);
			}
			TempData[DS.Success] = $"Successfully updated roles for {role.Name}";
			return RedirectToAction("Index", new { id = model.RoleId });
		}
	}
}


<#

	List<string> ListFiles(string path, string fileType)
{
    var root = Host.ResolvePath("");
    List<string> models = new List<string>();

    // Define una lista de palabras clave de nombres de modelos a excluir
    var excludeModelNames = new List<string> { "Department.cs", "Gender.cs", "Municipality.cs" };

    var fileNames = Directory.EnumerateFiles(root + path, "*." + fileType, SearchOption.AllDirectories)
        .Where(f => !f.EndsWith("OrbitaDbContext.cs")) // Condición existente para excluir DbContext
        .Where(f => !excludeModelNames.Contains(Path.GetFileName(f))) // Excluye basado en la lista de palabras clave
        .Select(f => f.Replace("\\", "/"))
        .Select(f => "~" + f.Substring(root.Length))
        .OrderBy(f => f)
        .ToList();

    foreach(string fileName in fileNames)
    {
        models.Add($"{Path.GetFileNameWithoutExtension(fileName)}");
    }

    return models;
}


#>

